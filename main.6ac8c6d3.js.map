{"version":3,"sources":["scripts/main.js"],"names":["board","button","document","querySelector","startMessage","scoreText","table","winMessage","loseMessage","arrowKeys","rows","columns","score","slideRow","row","isReversed","updatedRow","filter","num","reverse","i","length","splice","push","updateColumn","isDown","c","column","map","r","updateRow","isRight","updateField","currentCell","cells","className","classList","add","textContent","generateTile","isFirst","flat","includes","tileValue","Math","random","found","floor","move","pressedKey","prevBoard","up","down","left","right","isWin","isLoss","isZero","checkUp","checkDown","checkLeft","checkRight","addEventListener","contains","remove","e","key"],"mappings":"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","file":"main.6ac8c6d3.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst scoreText = document.querySelector('.game-score');\nconst table = document.querySelector('.game-field');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nconst arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\nconst rows = 4;\nconst columns = 4;\nlet board;\nlet score = 0;\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  scoreText.textContent = score;\n\n  generateTile(true);\n  generateTile(true);\n});\n\ndocument.addEventListener('keydown', e => {\n  const pressedKey = e.key;\n\n  if (arrowKeys.includes(pressedKey)) {\n    move(pressedKey);\n    scoreText.textContent = score;\n\n    if (isWin()) {\n      winMessage.classList.remove('hidden');\n    }\n\n    if (isLoss()) {\n      loseMessage.classList.remove('hidden');\n    }\n  }\n});\n\nfunction slideRow(row, isReversed = false) {\n  const updatedRow = row.filter(num => num > 0);\n\n  if (isReversed) {\n    updatedRow.reverse();\n  }\n\n  for (let i = 0; i < updatedRow.length - 1; i++) {\n    if (updatedRow[i] === updatedRow[i + 1]) {\n      updatedRow.splice(i, 2, updatedRow[i] * 2);\n      score += updatedRow[i];\n    }\n  }\n\n  while (updatedRow.length < row.length) {\n    updatedRow.push(0);\n  }\n\n  if (isReversed) {\n    return updatedRow.reverse();\n  }\n\n  return updatedRow;\n}\n\nfunction updateColumn(isDown) {\n  for (let c = 0; c < columns; c++) {\n    const column = slideRow(board.map(r => r[c]), isDown);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = column[r];\n    }\n  }\n}\n\nfunction updateRow(isRight) {\n  for (let r = 0; r < rows; r++) {\n    board[r] = slideRow(board[r], isRight);\n  }\n}\n\nfunction updateField() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const currentCell = table.rows[r].cells[c];\n\n      currentCell.className = '';\n      currentCell.classList.add('field-cell', `field-cell--${board[r][c]}`);\n      currentCell.textContent = board[r][c] || '';\n    }\n  }\n}\n\nfunction generateTile(isFirst = false) {\n  if (!board.flat().includes(0)) {\n    return 'No empty cells left!';\n  }\n\n  const tileValue = Math.random() >= 0.9 && !isFirst ? 4 : 2;\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = tileValue;\n      updateField();\n      found = true;\n    }\n  }\n}\n\nfunction move(pressedKey) {\n  const prevBoard = [...board];\n  const [ up, down, left, right ] = arrowKeys;\n  let isReversed = false;\n\n  if (pressedKey === down || pressedKey === right) {\n    isReversed = true;\n  }\n\n  switch (pressedKey) {\n    case up:\n    case down:\n      updateColumn(isReversed);\n      break;\n    case left:\n    case right:\n      updateRow(isReversed);\n      break;\n    default:\n      return 'Unknown command!';\n  }\n\n  if (prevBoard.flat() !== board.flat()) {\n    generateTile(board);\n  }\n\n  updateField();\n}\n\nfunction isWin() {\n  return board.flat().includes(2048);\n}\n\nfunction isLoss() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const currentCell = board[r][c];\n      const isZero = currentCell === 0;\n      const checkUp = r > 0 && board[r - 1][c] === currentCell;\n      const checkDown = r < rows - 1 && board[r + 1][c] === currentCell;\n      const checkLeft = c > 0 && board[r][c - 1] === currentCell;\n      const checkRight = c < columns - 1 && board[r][c + 1] === currentCell;\n\n      if (isZero || checkDown || checkUp || checkLeft || checkRight) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"]}